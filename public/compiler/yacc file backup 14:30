%{
#include <stdbool.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

int yylex(void);
void yyerror(char *);

extern int line;
extern int column;

char *jserror = "[Jigh-Sight Error]";
char *jserrortype = "ERROR TYPE";

%}

%token END_OF_FILE 0
%token BREAK
%token CASE
%token CATCH
%token CLASS
%token CONST
%token CONTINUE
%token DEBUGGER
%token DEFAULT
%token DELETE
%token DO
%token ELSE
%token EXPORT
%token EXTENDS
%token FINALLY
%token FOR
%token FUNCTION
%token IF
%token IMPORT
%token IN
%token INSTANCEOF
%token LET
%token NEW
%token OF
%token RETURN
%token <sval> SUPER
%token SWITCH
%token THIS
%token THROW
%token TRY
%token TYPEOF
%token VAR
%token VOID
%token WHILE
%token WITH
%token YIELD
%token ENUM
%token AWAIT
%token IMPLEMENTS
%token INTERFACE
%token PACKAGE
%token PRIVATE
%token PROTECTED
%token PUBLIC
%token <sval> LITERAL_NULL                // null
%token <sval> LITERAL_TRUE                // true
%token <sval> LITERAL_FALSE               // false
%token LITERAL_UNDEFINED                  // undefined
%token LITERAL_NAN                        // NaN
%token UNARY_ADD                          // ++
%token UNARY_SUBTRACT                     // --
%token LOGICAL_NOT                        // !
%token MULTIPLY                           // *
%token DIVIDE                             // /
%token MODULO                             // %
%token ADD                                // +
%token SUBTRACT                           // -
%token EQUAL                              // ==
%token NOT_EQUAL                          // !=
%token EXACTLY_EQUAL                      // ===
%token NOT_EXACTLY_EQUAL                  // !==
%token LEFT_SHIFT                         // <<
%token SIGNED_RIGHT_SHIFT                 // >>
%token UNSIGNED_RIGHT_SHIFT               // >>>
%token LESS_THAN                          // <
%token GREATER_THAN                       // >
%token LESS_THAN_OR_EQUAL                 // <=
%token GREATER_THAN_OR_EQUAL              // >=
%token QUESTION_MARK                      // ?
%token COLON                              // :
%token LOGICAL_AND                        // &&
%token LOGICAL_OR                         // ||
%token BITWISE_AND                        // &
%token BITWISE_OR                         // |
%token BITWISE_XOR                        // ^
%token BITWISE_NOT                        // ~
%token ASSIGNMENT                         // =
%token ADDITION_ASSIGNMENT                // +=
%token SUBTRACTION_ASSIGNMENT             // -=
%token MULTIPLICATION_ASSIGNMENT          // *=
%token DIVISION_ASSIGNMENT                // /=
%token MODULUS_ASSIGNMENT                 // %=
%token EXPONENTIATION_ASSIGNMENT          // **=
%token LEFT_SHIFT_ASSIGNMENT              // <<=
%token SIGNED_RIGHT_SHIFT_ASSIGNMENT      // >>=
%token UNSIGNED_RIGHT_SHIFT_ASSIGNMENT    // >>>=
%token BITWISE_AND_ASSIGNMENT             // &=
%token BITWISE_XOR_ASSIGNMENT             // ^=
%token BITWISE_OR_ASSIGNMENT              // |=
%token ARROW_FUNCTION                     // =>
%token <sval> RIGHT_PAREN                 // )
%token <sval> LEFT_PAREN                  // (
%token <sval> RIGHT_BRACE                 // }
%token <sval> LEFT_BRACE                  // {
%token <sval> RIGHT_BRACKET               // ]
%token <sval> LEFT_BRACKET                // [
%token COMMA                              // ,
%token FULL_STOP                          // .
%token ELLIPSIS                           // ...
%token SEMICOLON                          // ;
%token <sval> DOUBLE_QUOTE                // "
%token <sval> SINGLE_QUOTE                // '
%token <sval> VALUE_INTEGER
%token <sval> VALUE_DOUBLE
%token <sval> VALUE_STRING
%token <sval> IDENTIFIER
%token LINE_FEED
%token CARRIAGE_RETURN
%token LINE_SEPARATOR
%token PARAGRAPH_SEPARATOR


%union {
    int ival;
    double dval;
    const char* sval;
    bool bval;
    char cval;
}


%error-verbose

%nonassoc ELSE

%nonassoc EQUAL
%nonassoc NOT_EQUAL
%nonassoc EXACTLY_EQUAL
%nonassoc NOT_EXACTLY_EQUAL
%nonassoc ASSIGNMENT


%type <sval> Identifier IdentifierName Statement IfStatement Expression DecimalIntegerLiteral DecimalLiteral NumericLiteral
  Literal PrimaryExpression MemberExpression NewExpression LeftHandSideExpression
  PostfixExpression UnaryExpression  MultiplicativeExpression AdditiveExpression
  ShiftExpression RelationalExpression EqualityExpression AssignmentExpression
  ConditionalExpression LogicalANDExpression LogicalORExpression BitwiseORExpression
  BitwiseANDExpression BitwiseXORExpression IdentifierReference BindingIdentifier LabelIdentifier StringLiteral
  CatchParameter LiteralPropertyName ComputedPropertyName PropertyName PropertyDefinition ObjectLiteral BindingPattern
  ObjectBindingPattern ArrayBindingPattern YieldExpression ArrowFunction CallExpression NullLiteral BooleanLiteral
  ArrayLiteral ClassExpression GeneratorExpression MethodDefinition CoverInitializedName
  CoverParenthesizedExpressionAndArrowParameterList FunctionExpression SuperCall BindingElement FormalParameter
  SingleNameBinding
%type <cval> MultiplicativeOperator AssignmentOperator

%%

/*
 * Javascript EcmaScript 2015 (ES6) Lexical Grammar
 * http://www.ecma-international.org/ecma-262/6.0/#sec-lexical-grammar
 */








/* 15.1 Scripts
 * http://www.ecma-international.org/ecma-262/6.0/#sec-scripts
 */


/* printf("%d", variable); */
Script:
    ScriptBody
    ;

ScriptBody:
    StatementList
    ;

/* 15.2.3 Exports
* http://www.ecma-international.org/ecma-262/6.0/#sec-exports
*/

ExportDeclaration:
    EXPORT VariableStatement { printf("- ExportDeclaration at line %d\n", line); }
    ;

/* 14.5 Class Declarations
 * http://www.ecma-international.org/ecma-262/6.0/#sec-class-declarations
 */

ClassDeclaration:
    ClassExpression
    | CLASS ClassTail         { printf("- ClassDeclaration at line %d\n", line); }
    ;

ClassExpression:
    CLASS BindingIdentifier ClassTail { printf("- ClassExpression at line %d\n", line); }
    ;

ClassTail:
    ClassHeritage LEFT_BRACE ClassBody RIGHT_BRACE
    ;

ClassHeritage:
    EXTENDS LeftHandSideExpression { printf("- ClassHeritage at line %d\n", line); }
    ;

ClassBody:
    ClassElementList { printf("- ClassBody at line %d\n", line); }
    ;

ClassElementList:
    ClassElement
    | ClassElementList ClassElement
    ;

ClassElement:
    MethodDefinition
    | "static" MethodDefinition
    | SEMICOLON
    ;

StrictFormalParameters:
    FormalParameters
    ;

/* Required for ArrowFormalParameters
StrictFormalParameters:
    FormalParameters
    ;
*/

/* 14.4 Generator Function Definitions
 * http://www.ecma-international.org/ecma-262/6.0/#sec-generator-function-definitions
 */

YieldExpression:
    YIELD
    | YIELD AssignmentExpression
    | YIELD MULTIPLY AssignmentExpression
    ;

/* 14.3 Method Definitions
 * http://www.ecma-international.org/ecma-262/6.0/#sec-method-definitions
 */

MethodDefinition:
    PropertyName LEFT_PAREN StrictFormalParameters RIGHT_PAREN RIGHT_BRACE FunctionBody LEFT_BRACE
    | "get" PropertyName LEFT_PAREN RIGHT_PAREN LEFT_BRACE FunctionBody RIGHT_BRACE
    | "set" PropertyName LEFT_PAREN PropertySetParameterList RIGHT_PAREN LEFT_BRACE FunctionBody RIGHT_BRACE
    ;

PropertySetParameterList:
    FormalParameter
    ;

/* 14.2 Arrow Function Definitions
 * http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions
 */

ArrowFunction:
    ArrowParameters ARROW_FUNCTION ConciseBody { printf("- ArrowFunction at line %d\n", line); }
    ;

ArrowParameters:
    CoverParenthesizedExpressionAndArrowParameterList
    ;

CoverParenthesizedExpressionAndArrowParameterList:
    LEFT_PAREN Expression RIGHT_PAREN
    | LEFT_PAREN RIGHT_PAREN
    | LEFT_PAREN ELLIPSIS BindingIdentifier RIGHT_PAREN
    | LEFT_PAREN Expression COMMA ELLIPSIS BindingIdentifier RIGHT_PAREN
    ;

ConciseBody:
    AssignmentExpression
    | RIGHT_BRACKET FunctionBody LEFT_BRACKET
    ;

/* 14.1 Function Definitions
 * http://www.ecma-international.org/ecma-262/6.0/#sec-function-definitions
 */

FunctionDeclaration:
    FUNCTION BindingIdentifier LEFT_PAREN FormalParameters RIGHT_PAREN LEFT_BRACE FunctionBody RIGHT_BRACE
    | FUNCTION LEFT_PAREN FormalParameters RIGHT_PAREN LEFT_BRACE FunctionBody RIGHT_BRACE
    ;


FunctionExpression:
    FUNCTION BindingIdentifier LEFT_PAREN FormalParameters RIGHT_PAREN LEFT_BRACE FunctionBody RIGHT_BRACE
    ;


FormalParameters:
    /* empty */
    | FormalParameterList                     { /*$$ = $1;*/ }
    ;

FormalParameterList:
    /* incomplete */
    FormalsList                             { /*$$ = $1;*/ }
    | FormalsList COMMA FormalParameter     { /*$$ = $1; $$->push_back($3);*/ }
    ;

FormalsList:
    FormalParameter                         { /*$$ = new vector<Expression*>; $$->push_back($1);*/ }
    | FormalsList COMMA FormalParameter     { /*$$ = $1; $$->push_back($3);*/ }
    ;

FormalParameter:
    BindingElement                          { /*$$ = $1;*/ }
    ;

FunctionBody:
    FunctionStatementList                   { /*$$ = $1;*/ }
    ;

FunctionStatementList:
    StatementList                           { /*$$ = $1;*/ }
    ;

/* 13.16 The debugger Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-debugger-statement
 */

DebuggerStatement:
    DEBUGGER SEMICOLON
    ;

/* 13.14 The throw Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-throw-statement
 */

ThrowStatement:
    THROW Expression SEMICOLON { printf("THROW at line %d\n", line); }
    ;

/* 13.13 The try Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-try-statement
 */

TryStatement:
    TRY Block Catch 	{ printf("- TRY BLOCK\n"); }
    | TRY Block Finally 	{ printf("- TRY BLOCK\n"); }
    | TRY Block Catch Finally 	{ printf("- TRY BLOCK\n"); }
    ;

Catch:
    CATCH LEFT_PAREN CatchParameter RIGHT_PAREN Block { printf("- CATCH BLOCK at line %d\n", line); }
    ;

Finally:
    FINALLY Block 	{ printf("- FINALLY BLOCK at line %d\n", line); }
    ;

CatchParameter:
	BindingIdentifier	{/*$$ = $1;*/}
	| BindingPattern

/* 13.13 Labelled Statements
 * http://www.ecma-international.org/ecma-262/6.0/#sec-labelled-statements
 */

LabelledStatement:
    LabelIdentifier COLON LabelledItem      { printf("- STATEMENT (:) at line %d\n", line); }
    ;

LabelledItem:
    Statement                                { /*$$ = new LabelledItemStatement($1); */}
    | FunctionDeclaration
    ;


/* 13.12 The switch Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-switch-statement
 */

SwitchStatement:
    /* TODO: implement default clause */
    SWITCH LEFT_PAREN Expression RIGHT_PAREN CaseBlock  {/*$$ = new SwitchStatement($3, $5); */}
    ;

CaseBlock:
    LEFT_BRACE CaseClauses RIGHT_BRACE                              {/*$$ = new CaseBlockStatement($2);*/}
    | LEFT_BRACE CaseClauses DefaultClause CaseClauses RIGHT_BRACE  {/*$$ = new CaseBlockStatement($2, $3, $4);*/}
    ;

CaseClauses:
    CaseClause              {/*$$ = new vector<Statement*>; $$->push_back($1);*/}
    | CaseClauses CaseClause {/*$$ = $1; $$->push_back($2);*/}
    ;

CaseClause:
    CASE Expression COLON StatementList { /*$$ = new CaseClauseStatement($2, $4); */}
    ;

DefaultClause:
    DEFAULT COLON StatementList  { /*$$ = new CaseClauseStatement($3); */}
    ;

/* 13.11 The with Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-with-statement
 */

WithStatement:
    WITH LEFT_PAREN Expression RIGHT_PAREN Statement { /*$$ = new WithStatement($3, $5);  */}
    ;

/* 13.9 The break Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-break-statement
 */

BreakStatement:
    BREAK SEMICOLON                         { /*$$ = new LabelledStatement(); */}
    | BREAK LabelIdentifier SEMICOLON       {/*$$ = new LabelledStatement($2); */}
    ;

/* 13.8 The continue Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-continue-statement
 */

ContinueStatement:
    CONTINUE SEMICOLON						{ /*$$ = new LabelledStatement(); */}
    | CONTINUE LabelIdentifier SEMICOLON	{/*$$ = new LabelledStatement($2); */}
    ;

/* 13.7 The return Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-return-statement
 */

ReturnStatement:
    RETURN SEMICOLON                        { /*$$ = new ReturnStatement(); */}
    | RETURN Expression SEMICOLON           { /*$$ = new ReturnStatement($2); */}
    ;

/* 13.7 Iteration Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-iteration-statements
 */

IterationStatement:
    // TODO Missing look-ahead checks, see 13.7 for more details
    DO Statement WHILE LEFT_PAREN Expression RIGHT_PAREN SEMICOLON			{ /*$$ = new DoWhileIterationStatement($2,$5); */}
    | WHILE LEFT_PAREN Expression RIGHT_PAREN Statement						{ /*$$ = new IterationStatement($3, $5); */}
    | WHILE LEFT_PAREN Expression RIGHT_PAREN LEFT_BRACE Statement RIGHT_BRACE      { /*$$ = new IterationStatement($3, $6); */}
    | FOR LEFT_PAREN ExpressionOptional SEMICOLON ExpressionOptional SEMICOLON ExpressionOptional RIGHT_PAREN Statement
    | FOR LEFT_PAREN VAR VariableDeclarationList SEMICOLON ExpressionOptional SEMICOLON ExpressionOptional RIGHT_PAREN Statement
    | FOR LEFT_PAREN LexicalDeclaration ExpressionOptional SEMICOLON ExpressionOptional RIGHT_PAREN Statement
    | FOR LEFT_PAREN LeftHandSideExpression IN Expression RIGHT_PAREN Statement
    | FOR LEFT_PAREN VAR ForBinding IN Expression RIGHT_PAREN Statement
    | FOR LEFT_PAREN ForDeclaration IN Expression RIGHT_PAREN Statement
    | FOR LEFT_PAREN LeftHandSideExpression OF AssignmentExpression RIGHT_PAREN Statement
    | FOR LEFT_PAREN VAR ForBinding OF AssignmentExpression RIGHT_PAREN Statement
    | FOR LEFT_PAREN ForDeclaration OF AssignmentExpression RIGHT_PAREN Statement
    ;

ForDeclaration:
    LetOrConst
    | ForBinding
    ;

ForBinding:
    BindingIdentifier
    | BindingPattern
    ;

/* 13.6 If Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-if-statement
 */

IfStatement:
    IF LEFT_PAREN Expression RIGHT_PAREN Statement ELSE Statement     { printf("- IF ELSE at line %d\n", line); }
    | IF LEFT_PAREN Expression RIGHT_PAREN Statement                  { printf("- IF at line %d\n", line); }
    ;

 /* 13.5 Expression Statement
  * http://www.ecma-international.org/ecma-262/6.0/#sec-expression-statement
  */

ExpressionStatement:
    Expression SEMICOLON  {/* $$ = new ExpressionStatement($1); */}
  | Expression          {/* $$ = new ExpressionStatement($1); */}
    ;

/* 13.4 Empty Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-empty-statement
 */

EmptyStatement:
    SEMICOLON
    ;


/* 13.3.3 Destructuting Binding Patterns
 * http://www.ecma-international.org/ecma-262/6.0/#sec-destructuring-binding-patterns
 */

BindingPattern:
	ObjectBindingPattern
    | ArrayBindingPattern
	;

ObjectBindingPattern:
    LEFT_BRACE RIGHT_BRACE
    | LEFT_BRACE BindingPropertyList RIGHT_BRACE
    | LEFT_BRACE BindingPropertyList COMMA RIGHT_BRACE
    ;

ArrayBindingPattern:
    LEFT_BRACKET Elision BindingRestElement RIGHT_BRACKET
    | LEFT_BRACKET BindingElementList RIGHT_BRACKET
    | LEFT_BRACKET BindingElementList COMMA Elision BindingRestElement RIGHT_BRACKET
    ;

BindingPropertyList:
    BindingProperty
    | BindingPropertyList COMMA BindingProperty
    ;

BindingElementList:
    BindingElisionElement
    | BindingElementList COMMA BindingElisionElement
    ;

BindingElisionElement:
    Elision BindingElement
    ;

BindingProperty:
    SingleNameBinding
    | PropertyName COLON BindingElement
    ;

BindingElement:
    SingleNameBinding                   { /*$$ = $1; */}
    | BindingPattern Initialiser
    ;

SingleNameBinding:
    BindingIdentifier                   { /*$$ = $1; */}
    ;

BindingRestElement:
    ELLIPSIS BindingIdentifier
    ;

/*BindingRestElementOptional:
    BindingRestElement
    |
    ;
*/
/* 13.3.2 Variable Statement
 * http://www.ecma-international.org/ecma-262/6.0/#sec-variable-statement
 */

VariableStatement:
    VAR VariableDeclarationList SEMICOLON
    ;

VariableDeclarationList:
    VariableDeclaration
    | VariableDeclarationList COMMA VariableDeclaration
    ;

VariableDeclaration:
    BindingIdentifier
    | BindingIdentifier Initialiser
    ;

/* 13.3.1 let and const Declaration
 * http://www.ecma-international.org/ecma-262/6.0/#sec-let-and-const-declarations
 */

LexicalDeclaration:
    LetOrConst BindingList SEMICOLON
    ;

LetOrConst:
    LET
    | CONST
    ;

BindingList:
    LexicalBinding
    | BindingList COMMA LexicalBinding
    ;

LexicalBinding:
    BindingIdentifier Initialiser
    | BindingPattern Initialiser
    ;

/* 13.2 Block
 * http://www.ecma-international.org/ecma-262/6.0/#sec-block
 */

BlockStatement:
    Block                                 { /*$$ = $1; */}
    ;

Block:
    LEFT_BRACE StatementList RIGHT_BRACE 	{ printf("- {BLOCK} at line %d\n", line); }
    | LEFT_BRACE RIGHT_BRACE 				      { printf("- {} at line %d\n", line); }
    ;


StatementList:
    StatementListItem                   {/* $$ = new vector<Statement*>; $$->push_back($1);*/ }
    | StatementList StatementListItem   {/* $$ = $1; $$->push_back($2); */}
    ;

StatementListOptional:
    StatementList
    |
    ;

StatementListItem:
    Statement               { /*$$ = $1; */}
    | Declaration
    ;

/* 13 Statements and Declations
 * http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-statements-and-declarations
 */

Statement:
    BlockStatement          { /*$$ = $1; */}
    | VariableStatement
    | EmptyStatement
    | ExpressionStatement   { /*$$ = $1; */}
    | IfStatement           { /*$$ = $1; */}
    | BreakableStatement
    | ReturnStatement
    | ContinueStatement
    | BreakStatement
    | WithStatement
    | LabelledStatement
    | ThrowStatement
    | TryStatement
    | DebuggerStatement
    ;

 Declaration:
    /* TODO The below are not implemented yet, see: section 13 of spec for implementation details */
    HoistableDeclaration
    | ClassDeclaration
 /*   | LexicalDeclaration
    */
    | ExportDeclaration
    ;

 HoistableDeclaration:
    FunctionDeclaration
/*  | GeneratorDeclaration */
    ;

BreakableStatement:
    IterationStatement
    | SwitchStatement
    ;

/* 12.15 Comma Operator
 * http://www.ecma-international.org/ecma-262/6.0/#sec-comma-operator
 */

Expression:
    AssignmentExpression					 {/*$$ = $1;*/}
    | Expression COMMA AssignmentExpression
    ;

ExpressionOptional:
    Expression
    |
    ;

/* 12.14 AssignmentOperator
 * http://www.ecma-international.org/ecma-262/6.0/#sec-assignment-operators
 */

AssignmentExpression:
    ConditionalExpression	{/*$$ = $1;*/}
    | YieldExpression
    | ArrowFunction
    | LeftHandSideExpression ASSIGNMENT AssignmentExpression { printf("- ASSIGNMENT at line %d\n", line); }
    | LeftHandSideExpression AssignmentOperator AssignmentExpression  { printf("- ASSIGNMENT with OPERATOR at line %d\n", line); } /* reachable? */
    ;

AssignmentOperator:
    MULTIPLICATION_ASSIGNMENT         { printf("- MULTIPLICATION_ASSIGNMENT at line %d\n", line);  }
    | DIVISION_ASSIGNMENT             { printf("- DIVISION_ASSIGNMENT at line %d\n", line);  }
    | MODULUS_ASSIGNMENT              { printf("- MODULUS_ASSIGNMENT at line %d\n", line);  }
    | ADDITION_ASSIGNMENT             { printf("- ADDITION_ASSIGNMENT at line %d\n", line);  }
    | SUBTRACTION_ASSIGNMENT          { printf("- SUBTRACTION_ASSIGNMENT at line %d\n", line);  }
    | LEFT_SHIFT_ASSIGNMENT           { printf("- LEFT_SHIFT_ASSIGNMENT at line %d\n", line);  }
    | SIGNED_RIGHT_SHIFT_ASSIGNMENT   { printf("- SIGNED_RIGHT_SHIFT_ASSIGNMENT at line %d\n", line);  }
    | UNSIGNED_RIGHT_SHIFT_ASSIGNMENT { printf("- UNSIGNED_RIGHT_SHIFT_ASSIGNMENT at line %d\n", line);  }
    | BITWISE_AND_ASSIGNMENT          { printf("- BITWISE_AND_ASSIGNMENT at line %d\n", line);  }
    | BITWISE_XOR_ASSIGNMENT          { printf("- BITWISE_XOR_ASSIGNMENT at line %d\n", line);  }
    | BITWISE_OR_ASSIGNMENT           { printf("- BITWISE_OR_ASSIGNMENT at line %d\n", line);  }
    ;

/* 12.13 Conditional Operator
 * http://www.ecma-international.org/ecma-262/6.0/#sec-conditional-operator
 */

ConditionalExpression:
    LogicalORExpression	{/*$$ = $1;*/}
    | LogicalORExpression QUESTION_MARK AssignmentExpression COLON AssignmentExpression { printf("ConditionalExpression at line %d\n", line); }
    ;

/* 12.12 Binary Logic Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-binary-logical-operators
 */

LogicalANDExpression:
    BitwiseORExpression	{ /*$$ = $1; */}
    | LogicalANDExpression LOGICAL_AND BitwiseORExpression { printf("- LOGICAL_AND at line %d\n", line); }
    ;

LogicalORExpression:
    LogicalANDExpression	{/*$$ = $1;*/}
    | LogicalORExpression LOGICAL_OR LogicalANDExpression { printf("- LOGICAL_OR at line %d\n", line); }
    ;

/* 12.11 Binary Bitwise Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-binary-bitwise-operators
 */

BitwiseANDExpression:
    EqualityExpression {/*$$ = $1;*/}
    | BitwiseANDExpression BITWISE_AND EqualityExpression { printf("- BITWISE_AND at line %d\n", line);  }
    ;

BitwiseXORExpression:
    BitwiseANDExpression {/*$$ = $1;*/}
    | BitwiseXORExpression BITWISE_XOR BitwiseANDExpression { printf("- BITWISE_XOR at line %d\n", line);  }
    ;

BitwiseORExpression:
    BitwiseXORExpression	{ /*$$ = $1;*/ }
    | BitwiseORExpression BITWISE_OR BitwiseXORExpression { printf("- BITWISE_OR at line %d\n", line);  }
    ;

/* 12.10 Equality Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-equality-operators
 */

EqualityExpression:
    RelationalExpression	{ /*$$ = $1; */}
    | EqualityExpression EQUAL RelationalExpression
    | EqualityExpression NOT_EQUAL RelationalExpression
	  | EqualityExpression EXACTLY_EQUAL RelationalExpression
	  | EqualityExpression NOT_EXACTLY_EQUAL RelationalExpression
    ;

/* 12.9 Relational Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-relational-operators
 */

RelationalExpression:
    ShiftExpression	{ /*$$ = $1;*/ }
	| RelationalExpression LESS_THAN ShiftExpression { printf("- LESS_THAN at line %d\n", line); }
	| RelationalExpression GREATER_THAN ShiftExpression { printf("- GREATER_THAN at line %d\n", line); }
	| RelationalExpression LESS_THAN_OR_EQUAL ShiftExpression { printf("- LESS_THAN_OR_EQUAL at line %d\n", line); }
	| RelationalExpression GREATER_THAN_OR_EQUAL ShiftExpression { printf("- GREATER_THAN_OR_EQUAL at line %d\n", line); }
	| RelationalExpression INSTANCEOF ShiftExpression { printf("- INSTANCEOF at line %d\n", line); }
	| LEFT_BRACKET ADD IN RIGHT_BRACKET RelationalExpression IN ShiftExpression /* unknown */
  | Expression EQUAL Expression { printf("- EQUAL at line %d\n", line); }
  | Expression NOT_EQUAL Expression { printf("- NOT_EQUAL at line %d\n", line); }
  | Expression EXACTLY_EQUAL Expression { printf("- EXACTLY_EQUAL at line %d\n", line); }
  | Expression NOT_EXACTLY_EQUAL Expression { printf("- NOT_EXACTLY_EQUAL at line %d\n", line); }

    ;

/* 12.8 Bitwise Shift Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-shift-operators
 */

ShiftExpression:
    AdditiveExpression	{ /*$$ = $1; */}
	   | ShiftExpression LEFT_SHIFT AdditiveExpression { printf("- LEFT_SHIFT at line %d\n", line); }
	   | ShiftExpression SIGNED_RIGHT_SHIFT AdditiveExpression { printf("- SIGNED_RIGHT_SHIFT at line %d\n", line); }
	   | ShiftExpression UNSIGNED_RIGHT_SHIFT { printf("- UNSIGNED_RIGHT_SHIFT at line %d\n", line); }
    ;

/* 12.7 Additive Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-additive-operators
 */

AdditiveExpression:
    MultiplicativeExpression								{ /*$$ = $1;*/ }
    | AdditiveExpression ADD MultiplicativeExpression		{ printf("- BINARY ADD at line %d\n", line); }
    | AdditiveExpression SUBTRACT MultiplicativeExpression	{ printf("- BINARY SUBTRACT at line %d\n", line); }
    ;

/* 12.6 Multiplicative Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-multiplicative-operators
 */

MultiplicativeExpression:
    UnaryExpression
	  | MultiplicativeExpression MULTIPLY UnaryExpression 	 { { printf("- MULTIPLY at line %d\n", line); } }
    | MultiplicativeExpression DIVIDE UnaryExpression		   { { printf("- DIVIDE at line %d\n", line); } }
	  | MultiplicativeExpression MODULO UnaryExpression      { { printf("- MODULO at line %d\n", line); } }
    ;

/* 12.6 Multiplicative Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-multiplicative-operators
 */

MultiplicativeOperator:
	MULTIPLY | DIVIDE | MODULO
	;

/* 12.5 Unary Operators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-unary-operators
 */

UnaryExpression:
    PostfixExpression					                { /*$$ = $1;*/ }
	| DELETE UnaryExpression                    { printf("- DELETE at line %d\n", line); }
	| VOID UnaryExpression                      { printf("- VOID at line %d\n", line); }
	| TYPEOF UnaryExpression                    { printf("- TYPEOF at line %d\n", line); }
  | UNARY_ADD UnaryExpression			            { printf("- UNARY_ADD at line %d\n", line); }
  | UNARY_SUBTRACT UnaryExpression		        { printf("- UNARY_SUBTRACT at line %d\n", line); }
  | ADD UnaryExpression 				              { printf("- ADD at line %d\n", line); }
  | SUBTRACT UnaryExpression 			            { printf("subtract,%d,%d,%d\n", line, 1, column); }
	| BITWISE_NOT UnaryExpression               { printf("- BITWISE_NOT at line %d\n", line); }
	| LOGICAL_NOT UnaryExpression               { printf("- LOGICAL_NOT at line %d\n", line); }
    ;

/* 12.4 Postfix Expression
 * http://www.ecma-international.org/ecma-262/6.0/#sec-postifx-expression
 */

PostfixExpression:
    LeftHandSideExpression	{ /*$$ = $1;*/ }
    ;

/* 12.3 Left-Hand-Side Expressions
 * http://www.ecma-international.org/ecma-262/6.0/#sec-left-hand-side-expressions
 */

MemberExpression:
    PrimaryExpression	{ /*$$ = $1; */}
    ;

NewExpression:
    MemberExpression 				{ /*$$ = $1;*/}
    | NEW NewExpression                     { printf("- new expression at line%d\n", line); }
    ;

CallExpression:
    MemberExpression Arguments
    | SuperCall
    | CallExpression Arguments
    | CallExpression LEFT_BRACKET Expression RIGHT_BRACKET
    | CallExpression FULL_STOP Identifier
    /* | CallExpression TemplateLiteral */
    ;

SuperCall:
    SUPER Arguments                         /*{ printf("reserved,%d,%lu,%d\n", line, strlen($1), column); }*/
    ;

Arguments:
    LEFT_PAREN RIGHT_PAREN                  {  }
    | LEFT_PAREN ArgumentList RIGHT_PAREN   { printf("- (ARGS) at line %d\n", line); }
    ;

ArgumentList:
    AssignmentExpression    {/*
        $$ = new std::vector<Expression*>;
        $$->push_back($1);
*/
    }
  | ArgumentList COMMA AssignmentExpression   {/*$$ = $1; $$->push_back($3);*/}
    ;

LeftHandSideExpression:
    NewExpression	{ /*$$ = $1;*/ }
    | CallExpression
    ;

/* A.4 Functions and Classes
 * http://www.ecma-international.org/ecma-262/6.0/#sec-functions_and_classes
 */
GeneratorExpression :
    FUNCTION MULTIPLY BindingIdentifier LEFT_PAREN FormalParameters RIGHT_PAREN LEFT_BRACE GeneratorBody RIGHT_BRACE
    ;

GeneratorBody:
    FunctionBody
    ;

/* 12.1 Identifier
 * http://www.ecma-international.org/ecma-262/6.0/#sec-identifiers
 */

IdentifierReference:
    Identifier
    | YIELD
    ;

BindingIdentifier:
    Identifier
    | YIELD
    ;

LabelIdentifier:
    Identifier
    | YIELD
    ;

Identifier:
    IdentifierName 							            { printf("identifier,%d,%lu,%d\n", line, strlen($1), column); }
    ;

/* 12.2 Primary Expression
 * http://www.ecma-international.org/ecma-262/6.0/#sec-primary-expression
 */

PrimaryExpression:
    THIS
    | IdentifierReference
    | Literal
    | ArrayLiteral
    | ObjectLiteral
    | FunctionExpression
    | ClassExpression
    | GeneratorExpression
    | RegularExpressionLiteral
    | TemplateLiteral
    | CoverParenthesizedExpressionAndArrowParameterList
    ;

/* 12.2.4 Literals
 * http://www.ecma-international.org/ecma-262/6.0/#sec-primary-expression-literals
 */

Literal:
    NullLiteral
    | BooleanLiteral
    | NumericLiteral
    | StringLiteral
    ;

/* 12.2.5 Array Initializer
 * http://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer
 */

ArrayLiteral:
    LEFT_BRACKET RIGHT_BRACKET
    | LEFT_BRACKET Elision RIGHT_BRACKET
    | LEFT_BRACKET ElementList RIGHT_BRACKET
    | LEFT_BRACKET ElementList COMMA Elision RIGHT_BRACKET
    | LEFT_BRACKET ElementList COMMA RIGHT_BRACKET
    ;

ElementList:
    Elision AssignmentExpression
    | AssignmentExpression {/*$$ = new vector<Expression*>; $$->push_back($1);*/}
    | Elision SpreadElement
    | SpreadElement
    | ElementList COMMA Elision AssignmentExpression
    | ElementList COMMA AssignmentExpression { /*$$ = $1; $$->push_back($3);*/ }
    | ElementList COMMA Elision SpreadElement
    | ElementList COMMA SpreadElement
    ;

Elision:
    COMMA
    | Elision COMMA
    ;

SpreadElement:
    ELLIPSIS AssignmentExpression
    ;

NullLiteral:
    LITERAL_NULL
    ;

BooleanLiteral:
    LITERAL_TRUE           { printf("boolean,%d,%d,%d\n", line, 4, column); }
    | LITERAL_FALSE        { printf("boolean,%d,%d,%d\n", line, 5, column); }
    ;

StringLiteral:
    VALUE_STRING			     { printf("string,%d,%lu,%d\n", line, strlen($1), column); }
    | SINGLE_QUOTE VALUE_STRING SINGLE_QUOTE { printf("string,%d,%lu,%d\n", line, strlen($1), column); }
    | DOUBLE_QUOTE VALUE_STRING DOUBLE_QUOTE { printf("string,%d,%lu,%d\n", line, strlen($1), column); }
    ;

/* 12.2.6 Object Initialiser
 * http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer
 */

 ObjectLiteral:
 	  LEFT_BRACE RIGHT_BRACE
    | LEFT_BRACE PropertyDefinitionList RIGHT_BRACE
 	  | LEFT_BRACE PropertyDefinitionList COMMA RIGHT_BRACE
 	  ;

PropertyDefinitionList:
  	PropertyDefinition
    | PropertyDefinitionList COMMA PropertyDefinition
	  ;

PropertyDefinition:
	  IdentifierReference
	  | CoverInitializedName /* TODO: Cannot find real code of this use case */
    | PropertyName COLON AssignmentExpression
	  | MethodDefinition /* TODO: Method Definition has not been done */
	  ;

PropertyName:
    LiteralPropertyName 	{ printf("property_name,%d,%lu,%d\n", line, strlen($1), column); }
    | ComputedPropertyName
    ;

LiteralPropertyName:
    Identifier
    | StringLiteral 	{  }
    | NumericLiteral 	{/*$$ = new LiteralPropertyNameExpression($1);*/}
    ;

ComputedPropertyName:
	  LEFT_BRACKET AssignmentExpression RIGHT_BRACKET 	{/*$$ = new ComputedPropertyNameExpression($2);*/}
	  ;

CoverInitializedName:
	  IdentifierReference Initialiser
	  ;

Initialiser:
    ASSIGNMENT AssignmentExpression
    ;

/* 11.8.3 Numeric Literals
 * http://www.ecma-international.org/ecma-262/6.0/#sec-literals-numeric-literals
 */

NumericLiteral:
    DecimalLiteral
    ;

DecimalLiteral:
    DecimalIntegerLiteral
    | VALUE_DOUBLE                           { printf("double,%d,%lu,%d\n", line, strlen($1), column); }
    ;

DecimalIntegerLiteral:
    // DecimalDigit
    VALUE_INTEGER	                           { printf("integer,%d,%lu,%d\n", line, strlen($1), column); }
    ;


/* 11.6 Name and Keywords
 * http://www.ecma-international.org/ecma-262/6.0/#sec-names-and-keywords
 */
 IdentifierName:
     IdentifierStart
     | IdentifierName IdentifierPart IDENTIFIER
     ;

IdentifierStart:
    "$"
    | "_"
    | IDENTIFIER
    ;

IdentifierPart:
    "$"
    | "_"
    | IDENTIFIER
    ;

/* 11.3 Line Terminators
 * http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
 */

LineTerminator:
    LINE_FEED
    | CARRIAGE_RETURN
    | LINE_SEPARATOR
    | PARAGRAPH_SEPARATOR
    ;

LineTerminatorSequence:
    LINE_FEED
    | CARRIAGE_RETURN
    | LINE_SEPARATOR
    | PARAGRAPH_SEPARATOR
    | CARRIAGE_RETURN LINE_FEED
    ;

%%

/* link lex code */

#include "lex.yy.c"

void yyerror(char *s) {
    fprintf(stderr, "%s at line %d: %s\n", jserror, yylineno, s);
}

int main(void) {
    yyparse();
    return 0;
}
